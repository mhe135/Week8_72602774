---
title: "SQL"
format: html
editor: visual
---

## Library package

```{r echo=FALSE, warning=FALSE}
# Load necessary library
library(DBI)
library(RPostgres)
library(ggplot2)
library(usethis)

```

## Create connection to PostgreSQL server

```{r echo=FALSE, warning=FALSE}
# Edit the .Renviron file to add environment variables
usethis::edit_r_environ()

# Create a connection object using environment variables
con <- dbConnect(
  Postgres(),
  dbname = "Jeff",
  host = Sys.getenv("PG_HOST"),
  port = Sys.getenv("PG_PORT"),
  user = Sys.getenv("PG_USR"),
  password = Sys.getenv("PG_PASS")
)

# Check if the connection is valid
if (dbIsValid(con)) {
  print("Connection to the database is successful!")
} else {
  print("Failed to connect to the database.")
}

```

## Listing tables and fields

```{r echo=FALSE, warning=FALSE}
# List all tables on the database
dbListTables(con)
# List the column names for a table not in the example
dbListFields(con, "rental")
# Pull the first ten rows of the rental table
dbGetQuery(con, "SELECT * FROM rental LIMIT 10")
# Pull the total number of rentals
query <- "SELECT COUNT(*) FROM rental"
dbGetQuery(con, query)
```

##  Plotting data

```{r echo=FALSE, warning=FALSE}
# SQL query to calculate total daily revenue
revenue_query <- "
    SELECT date_trunc('day', payment_date) AS rental_day, SUM(amount) AS daily_revenue
    FROM payment
    GROUP BY rental_day
    ORDER BY rental_day"
revenue_data <- dbGetQuery(con, revenue_query)

# Plot the daily revenue
ggplot(revenue_data, aes(x = rental_day, y = daily_revenue)) +
    geom_line() +
    labs(title = 'Total Daily Revenue', x = 'Date', y = 'Revenue') +
    theme_minimal()

```

## Joining the data

```{r echo=FALSE, warning=FALSE}
join_query <- "
    SELECT r.rental_id, c.first_name, c.last_name, f.title, p.amount
    FROM rental r
    JOIN customer c ON r.customer_id = c.customer_id
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    JOIN payment p ON r.rental_id = p.rental_id
    WHERE r.rental_date BETWEEN '2024-01-01' AND '2024-12-31'"

joined_data <- dbGetQuery(con, join_query)

```

## Inventory stock take

```{r echo=FALSE,warning=FALSE}
# SQL query for R-rated movie inventory by category and store
query <- "
WITH r_rated_movies AS (
  SELECT film_id
  FROM film
  WHERE rating = 'R'
)
SELECT 
  s.store_id AS store_number,
  c.name AS movie_category,
  COUNT(i.inventory_id) AS r_rated_count
FROM store s
JOIN inventory i ON s.store_id = i.store_id
JOIN r_rated_movies r ON i.film_id = r.film_id
JOIN film_category fc ON r.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
JOIN film f ON r.film_id = f.film_id
WHERE f.rating = 'R'
GROUP BY s.store_id, c.name
ORDER BY s.store_id, r_rated_count DESC
"

# Execute the query
r_rated_inventory <- dbGetQuery(con, query)

# Plot the result

ggplot(r_rated_inventory, aes(x = movie_category, y = r_rated_count, fill = factor(store_number))) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal() +
  labs(title = "R-Rated Movie Inventory by Category and Store",
       x = "Category",
       y = "Count",
       fill = "Store Number") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
