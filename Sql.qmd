---
title: "SQL"
format: html
editor: visual
---

## Library package

```{r echo=FALSE, warning=FALSE}
# Load necessary library
library(DBI)
library(RPostgres)
library(dplyr)
library(ggplot2)
library(usethis)

```

## Create connection to PostgreSQL server

```{r echo=FALSE, warning=FALSE}
# Edit the .Renviron file to add environment variables
usethis::edit_r_environ()

# Create a connection object using environment variables
con <- dbConnect(
  Postgres(),
  dbname = "Jeff",
  host = Sys.getenv("PG_HOST"),
  port = Sys.getenv("PG_PORT"),
  user = Sys.getenv("PG_USR"),
  password = Sys.getenv("PG_PASS")
)

# Check if the connection is valid
if (dbIsValid(con)) {
  print("Connection to the database is successful!")
} else {
  print("Failed
 to connect to the database.")
}

```

## Listing tables and fields

```{r echo=FALSE, warning=FALSE}
# List all tables on the database
dbListTables(con)
# List the column names for a table not in the example
dbListFields(con, "rental")
# Pull the first ten rows of the rental table
dbGetQuery(con, "SELECT * FROM rental LIMIT 10")
# Pull the total number of rentals
query <- "SELECT COUNT(*) FROM rental"
dbGetQuery(con, query)
```

## Plotting data

```{r echo=FALSE, warning=FALSE}
# SQL query to calculate total daily revenue
revenue_query <- "
    SELECT date_trunc('day', payment_date) AS rental_day, SUM(amount) AS daily_revenue
    FROM payment
    GROUP BY rental_day
    ORDER BY rental_day"
revenue_data <- dbGetQuery(con, revenue_query)

# Plot the daily revenue
ggplot(revenue_data, aes(x = rental_day, y = daily_revenue)) +
    geom_line() +
    labs(title = 'Total Daily Revenue', x = 'Date', y = 'Revenue') +
    theme_minimal()

```

## Joining the data

```{r echo=FALSE, warning=FALSE}
join_query <- "
    SELECT r.rental_id, c.first_name, c.last_name, f.title, p.amount
    FROM rental r
    JOIN customer c ON r.customer_id = c.customer_id
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    JOIN payment p ON r.rental_id = p.rental_id
    WHERE r.rental_date BETWEEN '2024-01-01' AND '2024-12-31'"

joined_data <- dbGetQuery(con, join_query)

```

## Inventory stock take

```{r echo=FALSE,warning=FALSE}
inventory_query <- "
    WITH InventoryCounts AS (
        SELECT
            s.store_id,
            c.name AS category_name,
            COUNT(i.inventory_id) AS dvd_count
        FROM
            inventory i
        JOIN
            film f ON i.film_id = f.film_id
        JOIN
            film_category fc ON f.film_id = fc.film_id
        JOIN
            category c ON fc.category_id = c.category_id
        JOIN
            store s ON i.store_id = s.store_id
        JOIN
            rental r ON i.inventory_id = r.inventory_id
        WHERE
            f.rating = 'R'
        GROUP BY
            s.store_id, c.name
    )
    SELECT * FROM InventoryCounts
    ORDER BY store_id, category_name;
"
inventory_data <- dbGetQuery(con, inventory_query)

inventory_data <- inventory_data %>%
    mutate(across(where(~ inherits(.x, "integer64")), as.numeric))

ggplot(inventory_data, aes(x = category_name, y = dvd_count, fill = as.factor(store_id))) +
    geom_bar(stat = "identity", position = "dodge") +
    labs(title = 'Stock of R-Rated Movies by Category and Store', x = 'Movie Category', y = 'Number of DVDs') +
    theme_minimal()
```

## Optimisation

```{r echo=FALSE, warning=FALSE}
inventory_query_analyze <- "
    EXPLAIN ANALYZE
    WITH InventoryCounts AS (
        SELECT
            s.store_id,
            c.name AS category_name,
            COUNT(i.inventory_id) AS dvd_count
        FROM
            inventory i
        JOIN
            film f ON i.film_id = f.film_id
        JOIN
            film_category fc ON f.film_id = fc.film_id
        JOIN
            category c ON fc.category_id = c.category_id
        JOIN
            store s ON i.store_id = s.store_id
        JOIN
            rental r ON i.inventory_id = r.inventory_id
        WHERE
            f.rating = 'R'
        GROUP BY
            s.store_id, c.name
    )
    SELECT * FROM InventoryCounts
    ORDER BY store_id, category_name;
"

# Execute EXPLAIN ANALYZE to review query performance
execution_plan <- dbGetQuery(con, inventory_query_analyze)

# Display the query execution plan
print(execution_plan)

```

## Statement

Which step would you start with for optimisation ?

From Hash join, the cost and actual time is high and the number of rows are high. We need to optimisation because there is 6 join functions, it's too expensive.

What does that step do ?

Hash join combines rows in the dataset, the dataset is quite large, it requires optimisation to reduce cost and actual time.

```{}
```
